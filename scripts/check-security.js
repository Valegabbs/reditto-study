#!/usr/bin/env node

/**
 * Script de Verifica√ß√£o de Seguran√ßa - Reditto MVP
 * 
 * Este script verifica se todas as configura√ß√µes de seguran√ßa est√£o corretas
 * antes de iniciar o servidor em produ√ß√£o.
 */

const fs = require('fs');
const path = require('path');

console.log('üîí === VERIFICA√á√ÉO DE SEGURAN√áA - REDITTO MVP ===\n');

// Verificar se arquivo .env.local existe
const envPath = path.join(process.cwd(), '.env.local');
if (!fs.existsSync(envPath)) {
  console.error('‚ùå Arquivo .env.local n√£o encontrado!');
  console.error('   Crie o arquivo .env.local na raiz do projeto.');
  process.exit(1);
}

// Ler arquivo .env.local
const envContent = fs.readFileSync(envPath, 'utf8');
const envLines = envContent.split('\n');

let hasOpenRouterKey = false;
let hasValidOpenRouterKey = false;
let hasSupabaseConfig = false;

envLines.forEach(line => {
  const trimmedLine = line.trim();
  
  if (trimmedLine.startsWith('OPENROUTER_API_KEY=')) {
    hasOpenRouterKey = true;
    const key = trimmedLine.split('=')[1];
    
    if (key && key !== 'your_openrouter_api_key_here') {
      if (key.length >= 20 && key.startsWith('sk-or-')) {
        hasValidOpenRouterKey = true;
        console.log('‚úÖ API Key do OpenRouter configurada e v√°lida');
      } else {
        console.error('‚ùå API Key do OpenRouter inv√°lida');
        console.error('   Formato esperado: sk-or-v1-...');
      }
    } else {
      console.error('‚ùå API Key do OpenRouter n√£o configurada');
      console.error('   Substitua "your_openrouter_api_key_here" pela sua chave real');
    }
  }
  
  if (trimmedLine.startsWith('NEXT_PUBLIC_SUPABASE_URL=') && !trimmedLine.includes('your_supabase')) {
    hasSupabaseConfig = true;
    console.log('‚úÖ Configura√ß√£o do Supabase encontrada');
  }
});

// Verifica√ß√µes de seguran√ßa
console.log('\nüõ°Ô∏è VERIFICA√á√ïES DE SEGURAN√áA:');

// Verificar se .env.local est√° no .gitignore
const gitignorePath = path.join(process.cwd(), '.gitignore');
if (fs.existsSync(gitignorePath)) {
  const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
  if (gitignoreContent.includes('.env') || gitignoreContent.includes('.env*')) {
    console.log('‚úÖ Arquivos .env est√£o no .gitignore');
  } else {
    console.error('‚ùå Arquivos .env N√ÉO est√£o no .gitignore!');
    console.error('   Adicione ".env*" ao arquivo .gitignore');
  }
} else {
  console.error('‚ùå Arquivo .gitignore n√£o encontrado!');
}

// Verificar se middleware de seguran√ßa existe
const middlewarePath = path.join(process.cwd(), 'src', 'middleware.ts');
if (fs.existsSync(middlewarePath)) {
  console.log('‚úÖ Middleware de seguran√ßa encontrado');
} else {
  console.error('‚ùå Middleware de seguran√ßa n√£o encontrado!');
}

// Verificar APIs de seguran√ßa
const correctEssayPath = path.join(process.cwd(), 'src', 'app', 'api', 'correct-essay', 'route.ts');
const extractTextPath = path.join(process.cwd(), 'src', 'app', 'api', 'extract-text', 'route.ts');

if (fs.existsSync(correctEssayPath)) {
  console.log('‚úÖ API de corre√ß√£o encontrada');
} else {
  console.error('‚ùå API de corre√ß√£o n√£o encontrada!');
}

if (fs.existsSync(extractTextPath)) {
  console.log('‚úÖ API de OCR encontrada');
} else {
  console.error('‚ùå API de OCR n√£o encontrada!');
}

// Resultado final
console.log('\nüìä RESULTADO FINAL:');

if (hasValidOpenRouterKey && hasSupabaseConfig) {
  console.log('üéâ TODAS AS CONFIGURA√á√ïES EST√ÉO CORRETAS!');
  console.log('   Seu Reditto MVP est√° pronto para uso.');
  console.log('\nüöÄ Para iniciar o servidor:');
  console.log('   npm run dev');
} else {
  console.log('‚ö†Ô∏è  CONFIGURA√á√ïES INCOMPLETAS:');
  
  if (!hasValidOpenRouterKey) {
    console.log('   - Configure sua API Key do OpenRouter');
    console.log('   - Acesse: https://openrouter.ai/keys');
  }
  
  if (!hasSupabaseConfig) {
    console.log('   - Configure o Supabase (opcional para MVP)');
  }
  
  console.log('\nüìñ Consulte: CONFIGURACAO_API_KEY_SEGURA.md');
  process.exit(1);
}
