import { NextRequest, NextResponse } from 'next/server';

interface EssayResult {
  finalScore: number;
  competencies: {
    [key: string]: number;
  };
  feedback: {
    summary: string;
    improvements: string[];
    attention: string[];
    congratulations: string[];
    competencyFeedback: {
      [key: string]: string;
    };
  };
  originalEssay: string;
}

// Configura√ß√µes de seguran√ßa - Credenciais protegidas no servidor
const OPEN_WEBUI_BASE_URL = process.env.OPEN_WEBUI_BASE_URL;
const OPEN_WEBUI_API_KEY = process.env.OPEN_WEBUI_API_KEY;
const OPEN_WEBUI_MODEL = process.env.OPEN_WEBUI_MODEL || 'gemma3:4b';
const OPEN_WEBUI_JWT_TOKEN = process.env.OPEN_WEBUI_JWT_TOKEN;
const OPEN_WEBUI_API_PATH = process.env.OPEN_WEBUI_API_PATH || '/api/chat/completions';
const OPEN_WEBUI_DEBUG = process.env.OPEN_WEBUI_DEBUG === 'true';

// Configura√ß√µes de seguran√ßa
const MAX_TEXT_LENGTH = 5000;
const MIN_TEXT_LENGTH = 200;
const MAX_TOPIC_LENGTH = 200;

// Valida√ß√£o das credenciais do Open WebUI
function validateCredentials(): { valid: boolean; error?: string } {
  if (!OPEN_WEBUI_BASE_URL) {
    return { valid: false, error: 'OPEN_WEBUI_BASE_URL n√£o configurada' };
  }
  
  // API Key e JWT podem ser opcionais dependendo do setup do Open WebUI.
  
  return { valid: true };
}

async function analyzeEssay(essayText: string, topic?: string): Promise<EssayResult> {
  console.log('üîç Iniciando an√°lise da reda√ß√£o...');
  console.log('üìù Texto a ser analisado (comprimento):', essayText.length);
  console.log('üéØ Tema:', topic || 'N√£o especificado');

  try {
    const prompt = `INSTRU√á√ïES: Voc√™ √© um corretor especialista em reda√ß√µes do ENEM. Analise esta reda√ß√£o seguindo rigorosamente os crit√©rios oficiais do ENEM.

IMPORTANTE: Retorne APENAS um JSON v√°lido, sem texto antes ou depois, sem formata√ß√£o markdown, sem explica√ß√µes adicionais.

Estrutura do JSON:

{
  "finalScore": n√∫mero de 0 a 1000,
  "competencies": {
    "Compet√™ncia I": n√∫mero de 0 a 200,
    "Compet√™ncia II": n√∫mero de 0 a 200,
    "Compet√™ncia III": n√∫mero de 0 a 200,
    "Compet√™ncia IV": n√∫mero de 0 a 200,
    "Compet√™ncia V": n√∫mero de 0 a 200
  },
  "feedback": {
    "summary": "resumo geral detalhado da corre√ß√£o (2-3 par√°grafos)",
    "improvements": ["sugest√£o espec√≠fica de melhoria 1", "sugest√£o espec√≠fica de melhoria 2", "sugest√£o espec√≠fica de melhoria 3"],
    "attention": ["ponto de aten√ß√£o cr√≠tico 1", "ponto de aten√ß√£o cr√≠tico 2", "ponto de aten√ß√£o cr√≠tico 3"],
    "congratulations": ["aspecto positivo espec√≠fico 1", "aspecto positivo espec√≠fico 2", "aspecto positivo espec√≠fico 3"],
    "competencyFeedback": {
      "Compet√™ncia I": "feedback detalhado sobre dom√≠nio da modalidade escrita formal",
      "Compet√™ncia II": "feedback detalhado sobre compreens√£o do tema e tipo textual",
      "Compet√™ncia III": "feedback detalhado sobre sele√ß√£o e organiza√ß√£o de informa√ß√µes",
      "Compet√™ncia IV": "feedback detalhado sobre coes√£o e coer√™ncia",
      "Compet√™ncia V": "feedback detalhado sobre proposta de interven√ß√£o"
    }
  }
}

**CRIT√âRIOS DETALHADOS DO ENEM:**

**Compet√™ncia I - Dom√≠nio da modalidade escrita formal (0-200):**
- 200 pontos: Demonstra excelente dom√≠nio da modalidade escrita formal da l√≠ngua portuguesa e de escolha de registro. Desvios gramaticais ou de conven√ß√µes da escrita s√£o aceitos somente como excepcionalidade.
- 160 pontos: Demonstra bom dom√≠nio da modalidade escrita formal, com poucos desvios gramaticais e de conven√ß√µes da escrita.
- 120 pontos: Demonstra dom√≠nio mediano da modalidade escrita formal, com alguns desvios gramaticais e de conven√ß√µes da escrita.
- 80 pontos: Demonstra dom√≠nio insuficiente da modalidade escrita formal, com muitos desvios gramaticais e de conven√ß√µes da escrita.
- 40 pontos: Demonstra dom√≠nio prec√°rio da modalidade escrita formal, com in√∫meros desvios gramaticais e de conven√ß√µes da escrita.
- 0 pontos: Demonstra desconhecimento da modalidade escrita formal da l√≠ngua portuguesa.

**Compet√™ncia II - Compreender a proposta de reda√ß√£o e aplicar conceitos das v√°rias √°reas de conhecimento (0-200):**
- 200 pontos: Desenvolve o tema por meio de argumenta√ß√£o consistente, a partir de um repert√≥rio sociocultural produtivo e apresenta excelente dom√≠nio do texto dissertativo-argumentativo.
- 160 pontos: Desenvolve o tema por meio de argumenta√ß√£o consistente e apresenta bom dom√≠nio do texto dissertativo-argumentativo, com proposi√ß√£o, argumenta√ß√£o e conclus√£o.
- 120 pontos: Desenvolve o tema por meio de argumenta√ß√£o previs√≠vel e apresenta dom√≠nio mediano do texto dissertativo-argumentativo, com proposi√ß√£o, argumenta√ß√£o e conclus√£o.
- 80 pontos: Desenvolve o tema recorrendo √† c√≥pia de trechos dos textos motivadores ou apresenta dom√≠nio insuficiente do texto dissertativo-argumentativo.
- 40 pontos: Apresenta o assunto, tangenciando o tema, ou demonstra dom√≠nio prec√°rio do texto dissertativo-argumentativo.
- 0 pontos: Fuga ao tema/n√£o atendimento √† estrutura dissertativo-argumentativa.

**Compet√™ncia III - Selecionar, relacionar, organizar e interpretar informa√ß√µes, fatos, opini√µes e argumentos (0-200):**
- 200 pontos: Apresenta informa√ß√µes, fatos e opini√µes relacionados ao tema proposto, de forma consistente e organizada, configurando autoria, em defesa de um ponto de vista.
- 160 pontos: Apresenta informa√ß√µes, fatos e opini√µes relacionados ao tema, de forma organizada, com ind√≠cios de autoria, em defesa de um ponto de vista.
- 120 pontos: Apresenta informa√ß√µes, fatos e opini√µes relacionados ao tema, limitados aos argumentos dos textos motivadores e pouco organizados, em defesa de um ponto de vista.
- 80 pontos: Apresenta informa√ß√µes, fatos e opini√µes relacionados ao tema, mas desorganizados ou contradit√≥rios e limitados aos argumentos dos textos motivadores.
- 40 pontos: Apresenta informa√ß√µes, fatos e opini√µes pouco relacionados ao tema ou incoerentes e sem defesa de um ponto de vista.
- 0 pontos: Apresenta informa√ß√µes, fatos e opini√µes n√£o relacionados ao tema e sem defesa de um ponto de vista.

**Compet√™ncia IV - Demonstrar conhecimento dos mecanismos lingu√≠sticos necess√°rios para a constru√ß√£o da argumenta√ß√£o (0-200):**
- 200 pontos: Articula bem as partes do texto e apresenta repert√≥rio diversificado de recursos coesivos.
- 160 pontos: Articula as partes do texto com poucas inadequa√ß√µes e apresenta repert√≥rio diversificado de recursos coesivos.
- 120 pontos: Articula as partes do texto, de forma mediana, com inadequa√ß√µes, e apresenta repert√≥rio pouco diversificado de recursos coesivos.
- 80 pontos: Articula as partes do texto, de forma insuficiente, com muitas inadequa√ß√µes e apresenta repert√≥rio limitado de recursos coesivos.
- 40 pontos: Articula as partes do texto de forma prec√°ria.
- 0 pontos: N√£o articula as informa√ß√µes.

**Compet√™ncia V - Elaborar proposta de interven√ß√£o para o problema abordado (0-200):**
- 200 pontos: Elabora muito bem proposta de interven√ß√£o com detalhamento dos meios para realiz√°-la.
- 160 pontos: Elabora bem proposta de interven√ß√£o relacionada ao tema e articulada √† discuss√£o desenvolvida no texto.
- 120 pontos: Elabora, de forma mediana, proposta de interven√ß√£o relacionada ao tema e articulada √† discuss√£o desenvolvida no texto.
- 80 pontos: Elabora, de forma insuficiente, proposta de interven√ß√£o relacionada ao tema, ou n√£o articulada com a discuss√£o desenvolvida no texto.
- 40 pontos: Apresenta proposta de interven√ß√£o vaga, prec√°ria ou relacionada apenas ao assunto.
- 0 pontos: N√£o apresenta proposta de interven√ß√£o ou apresenta proposta n√£o relacionada ao tema ou ao assunto.

**TEMA DA REDA√á√ÉO:** ${topic || 'N√£o especificado'}

**REDA√á√ÉO A SER ANALISADA:**
${essayText}

TAREFA: Analise cada compet√™ncia detalhadamente e seja criterioso na pontua√ß√£o. Forne√ßa feedback construtivo e espec√≠fico.

LEMBRETE FINAL: Sua resposta deve ser APENAS o JSON v√°lido, come√ßando com { e terminando com }. N√£o inclua explica√ß√µes, coment√°rios ou formata√ß√£o markdown.`;

    console.log('üìù Enviando requisi√ß√£o para Open WebUI (Gemma3 An√°lise)...');
    console.log('üìç URL:', OPEN_WEBUI_BASE_URL);
    console.log('üéØ Modelo:', OPEN_WEBUI_MODEL);

    const response = await fetch(`${OPEN_WEBUI_BASE_URL}${OPEN_WEBUI_API_PATH}`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPEN_WEBUI_JWT_TOKEN || ''}`,
        "Content-Type": "application/json",
        "Accept": "application/json",
        "User-Agent": "Reditto-Next/1.0"
      },
      body: JSON.stringify({
        "model": OPEN_WEBUI_MODEL,
        "messages": [
          {
            "role": "user",
            "content": prompt
          }
        ],
        "max_tokens": 4000,
        "temperature": 0.2,
        "stream": false
      })
    });

    console.log('üìä Status da resposta An√°lise:', response.status);
    if (!response.ok) {
      const errorText = await response.text().catch(() => 'Erro desconhecido');
      console.error('‚ùå Erro na API de an√°lise:', {
        status: response.status,
        statusText: response.statusText,
        body: errorText,
        headers: Object.fromEntries(response.headers.entries())
      });
      let errorMessage = 'Erro na API de an√°lise';
      if (response.status === 401 || response.status === 403) {
        errorMessage = 'Credenciais inv√°lidas para o Open WebUI';
      } else if (response.status === 404 || response.status === 405) {
        errorMessage = 'Endpoint n√£o encontrado no Open WebUI';
      } else if (response.status === 429) {
        errorMessage = 'Muitas requisi√ß√µes. Tente novamente em alguns minutos';
      } else if (response.status === 400) {
        errorMessage = `Erro na requisi√ß√£o: ${errorText}`;
      } else if (response.status >= 500) {
        errorMessage = 'Servidor do Open WebUI temporariamente indispon√≠vel';
      }
      throw new Error(`${errorMessage} (${response.status})`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta de an√°lise recebida');
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Estrutura de resposta inv√°lida:', data);
      throw new Error('Resposta inv√°lida da API de an√°lise');
    }

    const analysisText = data.choices[0].message.content;
    console.log('üìÑ Resposta da an√°lise (primeiros 200 chars):', analysisText?.substring(0, 200) || 'Vazio');
    
    // Extrair JSON da resposta - v√°rias tentativas
    let jsonText = analysisText.trim();
    
    // Tentativa 1: Extrair de bloco de c√≥digo
    const jsonCodeBlockMatch = analysisText.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
    if (jsonCodeBlockMatch) {
      jsonText = jsonCodeBlockMatch[1].trim();
      console.log('üì¶ JSON extra√≠do de bloco de c√≥digo');
    }
    // Tentativa 2: Extrair JSON puro (do primeiro { ao √∫ltimo })
    else {
      const firstBrace = analysisText.indexOf('{');
      const lastBrace = analysisText.lastIndexOf('}');
      if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
        jsonText = analysisText.substring(firstBrace, lastBrace + 1).trim();
        console.log('üì¶ JSON extra√≠do por posi√ß√£o de chaves');
      }
      // Tentativa 3: Regex tradicional
      else {
        const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          jsonText = jsonMatch[0].trim();
          console.log('üì¶ JSON extra√≠do por regex');
        }
      }
    }
    
    console.log('üîç Tentando parsear JSON (primeiros 200 chars):', jsonText.substring(0, 200));

    try {
      const analysis: EssayResult = JSON.parse(jsonText);
      analysis.originalEssay = essayText;
      console.log('‚úÖ JSON parseado com sucesso, nota final:', analysis.finalScore);
      return analysis;
    } catch (parseError) {
      console.error('‚ùå Erro ao parsear JSON:', parseError);
      console.error('üìÑ Texto que causou erro:', jsonText);
      throw new Error('Resposta inv√°lida da API - JSON malformado');
    }
  } catch (error) {
    console.error('‚ùå Erro completo na an√°lise:', error);
    throw new Error(`Falha ao analisar reda√ß√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
  }
}

export async function POST(request: NextRequest) {
  console.log('üöÄ === INICIANDO PROCESSAMENTO DE REDA√á√ÉO ===');
  console.log('üîë Credenciais status:', OPEN_WEBUI_API_KEY ? `API Key configurada (${OPEN_WEBUI_API_KEY.substring(0, 15)}...)` : 'API Key N√ÉO CONFIGURADA');
  console.log('üîó Base URL:', OPEN_WEBUI_BASE_URL || 'N√ÉO CONFIGURADA');
  console.log('üéØ Modelo:', OPEN_WEBUI_MODEL || 'N√ÉO CONFIGURADO');
  
  try {
    // Verificar se as credenciais est√£o configuradas e v√°lidas
    const credentialsCheck = validateCredentials();
    if (!credentialsCheck.valid) {
      console.error('‚ùå Credenciais do Open WebUI inv√°lidas:', credentialsCheck.error);
      return NextResponse.json(
        { error: `Configura√ß√£o inv√°lida: ${credentialsCheck.error}. Configure as vari√°veis OPEN_WEBUI_* no arquivo .env.local` },
        { status: 500 }
      );
    }

    console.log('‚úÖ Credenciais validadas');

    // Adicionar headers de seguran√ßa
    const responseHeaders = {
      'X-Content-Type-Options': 'nosniff',
      'X-Frame-Options': 'DENY',
      'X-XSS-Protection': '1; mode=block',
    };

    const formData = await request.formData();
    const topic = formData.get('topic') as string;
    const essayText = formData.get('essayText') as string;

    console.log('üìù Dados recebidos:', {
      topic: topic || 'N√£o especificado',
      textLength: essayText?.length || 0
    });

    // Valida√ß√µes de seguran√ßa para texto
    if (!essayText) {
      console.error('‚ùå Texto da reda√ß√£o n√£o fornecido');
      return NextResponse.json(
        { error: 'Texto da reda√ß√£o √© obrigat√≥rio' },
        { status: 400, headers: responseHeaders }
      );
    }
    
    if (essayText.length < MIN_TEXT_LENGTH) {
      console.error('‚ùå Texto muito curto:', essayText.length);
      return NextResponse.json(
        { error: `Texto deve ter pelo menos ${MIN_TEXT_LENGTH} caracteres` },
        { status: 400, headers: responseHeaders }
      );
    }
    
    if (essayText.length > MAX_TEXT_LENGTH) {
      console.error('‚ùå Texto muito longo:', essayText.length);
      return NextResponse.json(
        { error: `Texto deve ter no m√°ximo ${MAX_TEXT_LENGTH} caracteres` },
        { status: 400, headers: responseHeaders }
      );
    }

    // Validar o t√≥pico se fornecido
    if (topic && topic.length > MAX_TOPIC_LENGTH) {
      console.error('‚ùå Tema muito longo:', topic.length);
      return NextResponse.json(
        { error: `Tema deve ter no m√°ximo ${MAX_TOPIC_LENGTH} caracteres` },
        { status: 400, headers: responseHeaders }
      );
    }

    // Sanitizar o texto (remover caracteres perigosos)
    const originalLength = essayText.length;
    const sanitizedText = essayText.replace(/[<>]/g, '').trim();
    
    if (originalLength !== sanitizedText.length) {
      console.log('üßπ Texto sanitizado');
    }
    
    console.log('üîç Iniciando an√°lise da IA...');
    const analysis = await analyzeEssay(sanitizedText, topic);

    console.log('üéâ === PROCESSAMENTO CONCLU√çDO COM SUCESSO ===');
    
    // Retornar resultado diretamente (sem armazenamento por enquanto)
    return NextResponse.json(analysis, { headers: responseHeaders });
    
  } catch (error) {
    console.error('‚ùå === ERRO NO PROCESSAMENTO ===');
    console.error('Erro completo:', error);
    
    // Log detalhado do erro
    if (error instanceof Error) {
      console.error('Tipo de erro:', error.constructor.name);
      console.error('Mensagem:', error.message);
      console.error('Stack trace:', error.stack);
    }
    
    // N√£o expor detalhes do erro para o cliente
    const errorMessage = error instanceof Error && error.message.includes('API') 
      ? 'Erro na comunica√ß√£o com o servi√ßo de an√°lise. Tente novamente em alguns minutos.'
      : 'Erro interno do servidor. Tente novamente.';
    
    return NextResponse.json(
      { error: errorMessage },
      { 
        status: 500,
        headers: {
          'X-Content-Type-Options': 'nosniff',
          'X-Frame-Options': 'DENY',
          'X-XSS-Protection': '1; mode=block',
        }
      }
    );
  }
}
